// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: notify.proto

package notifydemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifyServiceClient is the client API for NotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyServiceClient interface {
	CreateReplyNotify(ctx context.Context, in *CreateReplyNotifyRequest, opts ...grpc.CallOption) (*CreateReplyNotifyResponse, error)
	QueryReplyNotify(ctx context.Context, in *QueryReplyNotifyRequest, opts ...grpc.CallOption) (*QueryReplyNotifyResponse, error)
	QueryAllReplyNotify(ctx context.Context, in *QueryAllReplyNotifyRequest, opts ...grpc.CallOption) (*QueryAllReplyNotifyResponse, error)
	CreateLikeNotify(ctx context.Context, in *CreateLikeNotifyRequest, opts ...grpc.CallOption) (*CreateLikeNotifyResponse, error)
	QueryLikeNotify(ctx context.Context, in *QueryLikeNotifyRequest, opts ...grpc.CallOption) (*QueryLikeNotifyResponse, error)
	QueryAllLikeNotify(ctx context.Context, in *QueryAllLikeNotifyRequest, opts ...grpc.CallOption) (*QueryAllLikeNotifyResponse, error)
	ReadNotify(ctx context.Context, in *ReadNotifyRequest, opts ...grpc.CallOption) (*ReadNotifyResponse, error)
	DeleteNotify(ctx context.Context, in *DeleteNotifyRequest, opts ...grpc.CallOption) (*DeleteNotifyResponse, error)
	SearchAllNotify(ctx context.Context, in *SearchAllNotifyRequest, opts ...grpc.CallOption) (*SearchAllNotifyResponse, error)
	CreateSystemNotify(ctx context.Context, in *CreateSystemNotifyRequest, opts ...grpc.CallOption) (*CreateSystemNotifyResponse, error)
	QuerySystemNotify(ctx context.Context, in *QuerySystemNotifyRequest, opts ...grpc.CallOption) (*QuerySystemNotifyResponse, error)
	QueryAllSystemNotify(ctx context.Context, in *QueryAllSystemNotifyRequest, opts ...grpc.CallOption) (*QueryAllSystemNotifyResponse, error)
}

type notifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyServiceClient(cc grpc.ClientConnInterface) NotifyServiceClient {
	return &notifyServiceClient{cc}
}

func (c *notifyServiceClient) CreateReplyNotify(ctx context.Context, in *CreateReplyNotifyRequest, opts ...grpc.CallOption) (*CreateReplyNotifyResponse, error) {
	out := new(CreateReplyNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/CreateReplyNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QueryReplyNotify(ctx context.Context, in *QueryReplyNotifyRequest, opts ...grpc.CallOption) (*QueryReplyNotifyResponse, error) {
	out := new(QueryReplyNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/QueryReplyNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QueryAllReplyNotify(ctx context.Context, in *QueryAllReplyNotifyRequest, opts ...grpc.CallOption) (*QueryAllReplyNotifyResponse, error) {
	out := new(QueryAllReplyNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/QueryAllReplyNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) CreateLikeNotify(ctx context.Context, in *CreateLikeNotifyRequest, opts ...grpc.CallOption) (*CreateLikeNotifyResponse, error) {
	out := new(CreateLikeNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/CreateLikeNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QueryLikeNotify(ctx context.Context, in *QueryLikeNotifyRequest, opts ...grpc.CallOption) (*QueryLikeNotifyResponse, error) {
	out := new(QueryLikeNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/QueryLikeNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QueryAllLikeNotify(ctx context.Context, in *QueryAllLikeNotifyRequest, opts ...grpc.CallOption) (*QueryAllLikeNotifyResponse, error) {
	out := new(QueryAllLikeNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/QueryAllLikeNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) ReadNotify(ctx context.Context, in *ReadNotifyRequest, opts ...grpc.CallOption) (*ReadNotifyResponse, error) {
	out := new(ReadNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/ReadNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) DeleteNotify(ctx context.Context, in *DeleteNotifyRequest, opts ...grpc.CallOption) (*DeleteNotifyResponse, error) {
	out := new(DeleteNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/DeleteNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) SearchAllNotify(ctx context.Context, in *SearchAllNotifyRequest, opts ...grpc.CallOption) (*SearchAllNotifyResponse, error) {
	out := new(SearchAllNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/SearchAllNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) CreateSystemNotify(ctx context.Context, in *CreateSystemNotifyRequest, opts ...grpc.CallOption) (*CreateSystemNotifyResponse, error) {
	out := new(CreateSystemNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/CreateSystemNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QuerySystemNotify(ctx context.Context, in *QuerySystemNotifyRequest, opts ...grpc.CallOption) (*QuerySystemNotifyResponse, error) {
	out := new(QuerySystemNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/QuerySystemNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) QueryAllSystemNotify(ctx context.Context, in *QueryAllSystemNotifyRequest, opts ...grpc.CallOption) (*QueryAllSystemNotifyResponse, error) {
	out := new(QueryAllSystemNotifyResponse)
	err := c.cc.Invoke(ctx, "/notifydemo.NotifyService/QueryAllSystemNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServiceServer is the server API for NotifyService service.
// All implementations must embed UnimplementedNotifyServiceServer
// for forward compatibility
type NotifyServiceServer interface {
	CreateReplyNotify(context.Context, *CreateReplyNotifyRequest) (*CreateReplyNotifyResponse, error)
	QueryReplyNotify(context.Context, *QueryReplyNotifyRequest) (*QueryReplyNotifyResponse, error)
	QueryAllReplyNotify(context.Context, *QueryAllReplyNotifyRequest) (*QueryAllReplyNotifyResponse, error)
	CreateLikeNotify(context.Context, *CreateLikeNotifyRequest) (*CreateLikeNotifyResponse, error)
	QueryLikeNotify(context.Context, *QueryLikeNotifyRequest) (*QueryLikeNotifyResponse, error)
	QueryAllLikeNotify(context.Context, *QueryAllLikeNotifyRequest) (*QueryAllLikeNotifyResponse, error)
	ReadNotify(context.Context, *ReadNotifyRequest) (*ReadNotifyResponse, error)
	DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyResponse, error)
	SearchAllNotify(context.Context, *SearchAllNotifyRequest) (*SearchAllNotifyResponse, error)
	CreateSystemNotify(context.Context, *CreateSystemNotifyRequest) (*CreateSystemNotifyResponse, error)
	QuerySystemNotify(context.Context, *QuerySystemNotifyRequest) (*QuerySystemNotifyResponse, error)
	QueryAllSystemNotify(context.Context, *QueryAllSystemNotifyRequest) (*QueryAllSystemNotifyResponse, error)
	mustEmbedUnimplementedNotifyServiceServer()
}

// UnimplementedNotifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyServiceServer struct {
}

func (UnimplementedNotifyServiceServer) CreateReplyNotify(context.Context, *CreateReplyNotifyRequest) (*CreateReplyNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplyNotify not implemented")
}
func (UnimplementedNotifyServiceServer) QueryReplyNotify(context.Context, *QueryReplyNotifyRequest) (*QueryReplyNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReplyNotify not implemented")
}
func (UnimplementedNotifyServiceServer) QueryAllReplyNotify(context.Context, *QueryAllReplyNotifyRequest) (*QueryAllReplyNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllReplyNotify not implemented")
}
func (UnimplementedNotifyServiceServer) CreateLikeNotify(context.Context, *CreateLikeNotifyRequest) (*CreateLikeNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLikeNotify not implemented")
}
func (UnimplementedNotifyServiceServer) QueryLikeNotify(context.Context, *QueryLikeNotifyRequest) (*QueryLikeNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLikeNotify not implemented")
}
func (UnimplementedNotifyServiceServer) QueryAllLikeNotify(context.Context, *QueryAllLikeNotifyRequest) (*QueryAllLikeNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllLikeNotify not implemented")
}
func (UnimplementedNotifyServiceServer) ReadNotify(context.Context, *ReadNotifyRequest) (*ReadNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotify not implemented")
}
func (UnimplementedNotifyServiceServer) DeleteNotify(context.Context, *DeleteNotifyRequest) (*DeleteNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotify not implemented")
}
func (UnimplementedNotifyServiceServer) SearchAllNotify(context.Context, *SearchAllNotifyRequest) (*SearchAllNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAllNotify not implemented")
}
func (UnimplementedNotifyServiceServer) CreateSystemNotify(context.Context, *CreateSystemNotifyRequest) (*CreateSystemNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemNotify not implemented")
}
func (UnimplementedNotifyServiceServer) QuerySystemNotify(context.Context, *QuerySystemNotifyRequest) (*QuerySystemNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySystemNotify not implemented")
}
func (UnimplementedNotifyServiceServer) QueryAllSystemNotify(context.Context, *QueryAllSystemNotifyRequest) (*QueryAllSystemNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllSystemNotify not implemented")
}
func (UnimplementedNotifyServiceServer) mustEmbedUnimplementedNotifyServiceServer() {}

// UnsafeNotifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyServiceServer will
// result in compilation errors.
type UnsafeNotifyServiceServer interface {
	mustEmbedUnimplementedNotifyServiceServer()
}

func RegisterNotifyServiceServer(s grpc.ServiceRegistrar, srv NotifyServiceServer) {
	s.RegisterService(&NotifyService_ServiceDesc, srv)
}

func _NotifyService_CreateReplyNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).CreateReplyNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/CreateReplyNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).CreateReplyNotify(ctx, req.(*CreateReplyNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_QueryReplyNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReplyNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).QueryReplyNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/QueryReplyNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).QueryReplyNotify(ctx, req.(*QueryReplyNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_QueryAllReplyNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReplyNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).QueryAllReplyNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/QueryAllReplyNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).QueryAllReplyNotify(ctx, req.(*QueryAllReplyNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_CreateLikeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLikeNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).CreateLikeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/CreateLikeNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).CreateLikeNotify(ctx, req.(*CreateLikeNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_QueryLikeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLikeNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).QueryLikeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/QueryLikeNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).QueryLikeNotify(ctx, req.(*QueryLikeNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_QueryAllLikeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLikeNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).QueryAllLikeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/QueryAllLikeNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).QueryAllLikeNotify(ctx, req.(*QueryAllLikeNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_ReadNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).ReadNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/ReadNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).ReadNotify(ctx, req.(*ReadNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_DeleteNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).DeleteNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/DeleteNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).DeleteNotify(ctx, req.(*DeleteNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_SearchAllNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).SearchAllNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/SearchAllNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).SearchAllNotify(ctx, req.(*SearchAllNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_CreateSystemNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).CreateSystemNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/CreateSystemNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).CreateSystemNotify(ctx, req.(*CreateSystemNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_QuerySystemNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystemNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).QuerySystemNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/QuerySystemNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).QuerySystemNotify(ctx, req.(*QuerySystemNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_QueryAllSystemNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSystemNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).QueryAllSystemNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifydemo.NotifyService/QueryAllSystemNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).QueryAllSystemNotify(ctx, req.(*QueryAllSystemNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyService_ServiceDesc is the grpc.ServiceDesc for NotifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifydemo.NotifyService",
	HandlerType: (*NotifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReplyNotify",
			Handler:    _NotifyService_CreateReplyNotify_Handler,
		},
		{
			MethodName: "QueryReplyNotify",
			Handler:    _NotifyService_QueryReplyNotify_Handler,
		},
		{
			MethodName: "QueryAllReplyNotify",
			Handler:    _NotifyService_QueryAllReplyNotify_Handler,
		},
		{
			MethodName: "CreateLikeNotify",
			Handler:    _NotifyService_CreateLikeNotify_Handler,
		},
		{
			MethodName: "QueryLikeNotify",
			Handler:    _NotifyService_QueryLikeNotify_Handler,
		},
		{
			MethodName: "QueryAllLikeNotify",
			Handler:    _NotifyService_QueryAllLikeNotify_Handler,
		},
		{
			MethodName: "ReadNotify",
			Handler:    _NotifyService_ReadNotify_Handler,
		},
		{
			MethodName: "DeleteNotify",
			Handler:    _NotifyService_DeleteNotify_Handler,
		},
		{
			MethodName: "SearchAllNotify",
			Handler:    _NotifyService_SearchAllNotify_Handler,
		},
		{
			MethodName: "CreateSystemNotify",
			Handler:    _NotifyService_CreateSystemNotify_Handler,
		},
		{
			MethodName: "QuerySystemNotify",
			Handler:    _NotifyService_QuerySystemNotify_Handler,
		},
		{
			MethodName: "QueryAllSystemNotify",
			Handler:    _NotifyService_QueryAllSystemNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify.proto",
}
